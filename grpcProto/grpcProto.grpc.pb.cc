// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcProto/grpcProto.proto

#include "grpcProto/grpcProto.pb.h"
#include "grpcProto/grpcProto.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcProto {

static const char* gRPC_method_names[] = {
  "/grpcProto.gRPC/Account",
};

std::unique_ptr< gRPC::Stub> gRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< gRPC::Stub> stub(new gRPC::Stub(channel, options));
  return stub;
}

gRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Account_(gRPC_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status gRPC::Stub::Account(::grpc::ClientContext* context, const ::grpcProto::accRequest& request, ::grpcProto::accReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcProto::accRequest, ::grpcProto::accReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Account_, context, request, response);
}

void gRPC::Stub::async::Account(::grpc::ClientContext* context, const ::grpcProto::accRequest* request, ::grpcProto::accReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcProto::accRequest, ::grpcProto::accReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Account_, context, request, response, std::move(f));
}

void gRPC::Stub::async::Account(::grpc::ClientContext* context, const ::grpcProto::accRequest* request, ::grpcProto::accReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Account_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcProto::accReply>* gRPC::Stub::PrepareAsyncAccountRaw(::grpc::ClientContext* context, const ::grpcProto::accRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcProto::accReply, ::grpcProto::accRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Account_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcProto::accReply>* gRPC::Stub::AsyncAccountRaw(::grpc::ClientContext* context, const ::grpcProto::accRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

gRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      gRPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< gRPC::Service, ::grpcProto::accRequest, ::grpcProto::accReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](gRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcProto::accRequest* req,
             ::grpcProto::accReply* resp) {
               return service->Account(ctx, req, resp);
             }, this)));
}

gRPC::Service::~Service() {
}

::grpc::Status gRPC::Service::Account(::grpc::ServerContext* context, const ::grpcProto::accRequest* request, ::grpcProto::accReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcProto

